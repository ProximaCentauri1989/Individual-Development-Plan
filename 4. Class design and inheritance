1. Объявите свой класс исключения, который используется в случае возникновения любой ошибки доступа (к файлу, сетевому ресурсу и пр.).
Объясните почему вы создали его именно таким.

class access_error : public std::runtime_error
{
public:
	explicit access_error(const std::string& what_arg);
	explicit access_error(const char* what_arg);
	virtual ~access_error() noexcept {}
	virtual const char* what() const noexcept;
};

access_error::access_error(const std::string &what_arg): runtime_error(what_arg)
{
}

access_error::access_error(const char *what_arg): runtime_error(what_arg)
{
}

const char* access_error::what() const noexcept
{
	return runtime_error::what();
}

Иерархия исключений после базового класса exception разветвляется на logic_error и runtime_error. Поэтому правильнее отнести ошибки 
доступа к ошибкам времени выполнения.  Наследуем от runtime_error. Конструкторы делаем explicit чтобы предотвратить неявные 
преобразования. В остальном класс минималистичен, в соответствие с реализацией других классов в иерархии std::exception.
Следует заметить, что runtime_error обеспечивает строгую гарантию исключений. Если конструктор выбрасывает исключение - нет побочных 
эффектов.

2. Существует класс, который в деструкторе очищает ресурсы, а неудачи записывает ошибку в лог. Для логгирования используется синглтон 
логгера, который создается в статической области памяти:

Logger g_globalStaticLogger; // one variable for whole program

class MyFileWrapper
{
public:
    MyFileWrapper(const std::string& fullFilePath)
        : m_fullFilePath(fullFilePath)
    {}
    ~MyFileWrapper()
    {
        try
        {
            common::DeleteFile(m_fullFilePath); // throw exception    
        }
        catch (const std::exception& ex)
        {
            g_globalStaticLogger.Log(ex.what());
        }
    }
private:
    const std::string m_fullFilePath;
};
Через некоторое время ваш класс тоже создают в статической памяти:

class MyApplication
{
public:
    MyApplication() = default;
    ~MyApplication() = default;

private:
    static MyFileWrapper m_cacheFileWrapper;
};

MyAppPresenter::m_cacheFileWrapper("somePathFile");
Будет ли такая система работать нормально? Почему?

Статический обьект m_cacheFileWrapper будет использовать интерфейс другого статического обьекта синглтона логгера в случае 
возникновения исключения в деструкторе MyFileWrapper. Система будет работать нормально, если в момент разрушения обьекта 
m_cacheFileWrapper синглтон еще будет существовать. Известно, что статические обьекты разрушаются  в порядке, которые обратен
порядку построения. Но порядок построения undefined для статических обьектов, находящихся в разных единицах компиляции. 
Если синглтон логгера и m_cacheFileWrapper будет в одной единице компиляции и синглтон логгера построен ранее, то система 
должна работать как задумано.


3. Воспроизведите все описанные классы, их взаимосвязи и зависимости в коде.

Есть автомобиль, он состоит из кузова, двигателя, сидений, бортового компьютера и коробки передач. Остальные компоненты для этой 
модели не варьируются и не рассматриваются.  В эту модель можно установить разные вариации двигателя (с разным значением рабочего 
объема в литрах) и коробки передач (может быть механической и автоматической).  Автомобиль может быть c передним, задним или полным 
приводом. Автомобилем может управлять несколько человек из семьи, поэтому производитель автомобилей предусмотрел память  сидений 
(высота, угол наклона спинки, расстояние до руля). Выбрать водителя можно через кнопки на сиденье (номер 1,2,3), там же есть кнопка
сохранения.  Вся информация о состоянии автомобиля выводится на экран бортового компьютера. 


/*
Существует два ключевых класса Car и Driver. Класс Driver является другом класса Car. Водитель взаимодействует с частями машины. 
Водитель может захотеть настроить сидение вручную ChangeDriverSeatManual или выбрать конфигурацию сидения по кнопке из памяти сидения
ChooseSeatMode. Обе функции принимают на вход машину, а сам класс водителя дружественный для машины и может обращаться к частям
машины напряму, где машина в данной ситуации выступает наблюдателем (Observer). Вызывая эти функции водитель инициирует вызов 
соответствующих функций в классе Car. В классе Car осуществляется вызов функций подстройки водительского сидения обращаяясь к обьекту
класса Seat и вывод ифнормации на экран бортового компьютера класса SmartCPU.
*/

class Car{
public:
        enum class Gear { front = 0, rear, full }

        const size_t DRIVER_SEAT_INDEX = 0;
        const size_t DRIVER_SEATS_MAX = 4;

        friend class Driver; /*водитель друг машины и может взаимодействовать с ее частями*/
        
        Car(Body& b, Engine& e, SmartCPU& sc, Transmission& tr, Gear gr, size_t nSeats): body(b), engine(e), smartCPU(sc), gear(gr)
        {
        }
        
        void SetEngine(Engine& engn) { engine =  engn; }

        void SetTransmission(Transmission& tr) { transmission = tr; }

        /*Ручная подстройка сидения*/
        void ChangeDriverSeatManual(size_t height, size_t distToSteeringWheel, double angle){
            seats[DRIVER_SEAT_INDEX].Set(height, distToSteeringWheel, angle);
        }

        /*Автоподстрока по кнопке на сидении*/
        void ChangeDriverSeatByMode(Mode mode) {
            /*Инициировать подстройку сидения*/
            seats[DRIVER_SEAT_INDEX].PressModeButton(mode);

            /*Show actions*/
            sprintf(msg, "%s %d", "Driver seat was adjucted according to mode", static_cast<size_t>(mode));
            smartCPU.ShowAction(msg);
            msg[0] = '\0';

            sprintf(msg, "%s: %d/n%s: %d/n%s: %d/n", "Driver seat height: ", static_cast<size_t>(seats[DRIVER_SEAT_INDEX].GetHeight()),
                                                                             "Driver seat distance to wheel: ", static_cast<size_t>(seats[DRIVER_SEAT_INDEX].GetDistanceToWheel()),
                                                                              "Driver seat angle: ", static_cast<size_t>(seats[DRIVER_SEAT_INDEX].GetAngle()));
            smartCPU.ShowAction(msg);
            msg[0] = '\0';
        }

        /*Сохранить конфигурацию волительского сидения под номером*/
        void SaveDriverSeat(Mode mode) {
	
	    seats[DRIVER_SEAT_INDEX].SaveInMemoryByNumber(mode);

            /*Show actions*/
            sprintf(msg, "%s: %d", "The current configuration has been saved by number", static_cast<size_t>(mode));
            smartCPU.ShowAction(msg);
            msg[0] = '\0';
        }
private:
        Body body;
        Engine engine;
        SmartCPU smartCPU;
        Transmission transmission;
        Gear gear;
        Seat seasts[DRIVER_SEATS_MAX];
        
        char msg[255] = "";
}

class Body
{
    /*...*/
}

/*Класс бортового компьютера*/
class SmartCPU {
    void ShowAction(std::string& stat) {
       std::cout << "stat\n"; 
    }
}

/*Класс двигателя*/
class Engine{
public:
    explicit Engine(size_t ev): engineVolume(ev)
    ~Engine() {}
private:
    size_t engineVolume;
}

/*Класс трансмиссии*/
class Trasmission{
public:
    enum class transmissionType { mechanic, manual }
    Transmission(transmissionType tt): trType(tt) {}
private:
    transmissionType trType;
}

/*Класс сидение*/
class Seat {
public:
    const size_t BUTTONS_AMOUNT = 3;
    enum class Mode {first = 0, second, third}
    Seat(size_t, size_t, double);
    ~Seat() = default
    void Set(size_t h, size_t distToStWheel, double ang){
        height = h;
        distanceToSteeringWheel = distToStWheel;
        angle = ang;
    }

    size_t GetHeight() const 
   {
         return this->height;
   }

    size_t GetDistanceToWheel() const 
   {
         return this->distanceToSteeringWheel;
   }

   double GetAngle() const 
   {
         return this->angle;
   }
   
   void SaveInMemoryByNumber(Mode mode) {
   
        size_t index = static_cast<size_t>(mode);
	
        SeatMem[index].param0 = height;
        SeatMem[index].param1 = distanceToSteeringWheel;
        SeatMem[index].param2 = angle;
   }

   /*Подстройка сидения используя сохраненные конфигурации*/
    void PressModeButton(Mode mode) {
    	
	size_t index = static_cast<size_t>(mode);
	
	height = sm[index].height;
        distanceToSteeringWheel = sm[index].distanceToSteeringWheel;
        angle = sm[index].angle;
    }
    
private:
    struct SeatMem {
        size_t param0;
        size_t param1;
        double param2;

        SeatMem(): param0(0), param1(0), param2(0) {}
    }

    SeatMem sm[BUTTONS_AMOUNT]; //seat memory
    size_t height;
    size_t distanceToSteeringWheel;
    double angle;
}

/*Класс водителя взаимодействует с частями машины*/
class Driver{
public:
    Driver() {}
    ~Driver() = default
    
    /*Водитель вручную задает положение сидения*/
    ChangeDriverSeatManual(Car& c, size_t hght, size_t dist, double ang, Mode m){
        c.ChangeDriverSeat(hght, dist, ang);
        c.SaveDriverSeat(m);
    }

    /*Водитель меняет состояние сидения через кнопку на сидении*/
    void ChooseSeatMode(Car c, Mode mode){
        c.ChangeDriverSeatByMode(mode);
    }
}



4. Вам достался код, который содержит простые классы и свободные функции для работы с объектами этих классов.
Данные классы довольно большие, используют файловую систему и работают с сетью. 
Вам нужно покрыть данные функции юнит-тестами, какие действия нужно для этого предпринять?

class AmazingClass { ... };
class IncredibleClass { ... };

void MyMagnificentFunction(const AmazingClass& obj)
{ /* startling actions here */ }

void MyUnrealFunction(IncredibleClass& obj)
{ /* fabulous doings here */ }

Необходимо избавить классы от внешних зависимостей от файловой системы и сети и заменить эти обращения на фейковую реализацию 
обращения к файловой системе и сети, то есть сымититровать эти обращение. Тогда свободные функции, работающие с обьектами классов, 
которые будут использовать "фальшивое" обращение к сети и файловой системе будет проще тестировать. 
Выделяем методы работы с сетью и файловой системой в отдельный интерфейс. В классы добавляем обьект интерфейса и вводим дополнительный
конструктор, который будет принимать обьект этого интерфейса. В дальнейшем, для тестов будут вызываться "фейковые" реализации внешнего окружения. 
При написании тестов, обьекты, которые передаются в свободные функции, будут строиться с использованием конструкторов, которые
принимают фейковый интерфейс. Далее можно написать mock-класс, который наследует от "фейковой" реализации и при тестировании строить обьекты,
передающиеся на вход функций, с использованием mock-обьекта, в котором заранее определены результаты вызовов функций-членов (они же имитация окружения)
Mock будет применяться для проверки ожидаемого поведения тестируемых функций (вызывают ли они те или инные методы-члены самого mock-а и какое количество раз).

5. Существует базовый класс с виртуальными функциями и параметрами по умолчанию:

class Base
{
public:
    virtual DoMagic(int codeForMagic = 42);
    virtual ImpressString(std::string stringToImpress = "I'm ready") const;
};
От этого класса наследуется еще несколько классов, в которых переопределены указанные методы. С какими проблемами можно столкнуться, 
используя переопределенные в наследниках методы?

Виртуальные функции связываются динамически, а значения аргументов по умолчанию - статически (при компиляции) [Скотт Мейерс, стр 160, 
правило #38]. 

Предположим, есть следующее:

Base *b = new Derived;
b.DoMagic();
b.ImpressString();

Здесь Base - статический тип для b, а Derived динамический тип для b.
Используя переопределенные виртуальные методы в наследниках, при вызовах таких методов без указания параметров, по прежнему, 
то какая функция будет вызвана определено динамическим типом Derived, то есть, будут вызваны версии из производного класса 
(при условии что они переопределены в нем), но параметры по умолчанию будут взяты из функции в классе Base. То есть, параметры 
по умолчанию в переопределенной виртуальной функции в производном классе будут проигнорированы.

6. Какой из объявленных классов ведет себя предсказуемым образом? Почему?

class MyVector1
{
public:
    MyVector1(int size);
};

class MyVector2
{
public:
    explicit MyVector2(int size);
};

void func1(const MyVector1& v);
void func2(const MyVector2& v);

int main()
{
    func1(10); //Вызов конструктора MyVector1, конструирование обьекта типа MyVector1, затем вызов функции func1
    func2(10); //Ошибка компиляции, т.к. запрещено неявное преобразование
    MyVector1 v1 = 10; //преобразование типа аргумента в тип класса, то есть вызов конструктора MyVector1
    MyVector2 v2 = 10; //ошибка компиляции, т.к. запрещено неявное преобразование
}

В данном конкретном простом примере оба класса ведут себя предсказуемым образом. 
В классе MyVector1 конструктор является функцией преобразования из типа аргуменат в тип класса, т.к. у конструктора один параметр, 
а преобразование не запрещено с помощью explicit. Это поведение является предсказуемым. 
В классе MyVector2 для конструктора запрещено неявное преобразование типа аргуменат в тип класса, поэтому строки func2(10),
MyVector2 v2 = 10 приведут к ошибкам компиляции.


7. Существует класс сетевого клиента, который после создания устанавливает соединение с заданным хостом по заданному порту.
Видите ли вы детали, которые хотелось бы изменить? Почему?

class Network
{
public:
    Network(const std::string& host, int port = 0);
    
    void Send(const std::vector<unsigned char>& data);
    void Receive(std::vector<unsigned char>& data);

    std::string& GetHost();
    int& GetPort();

protected:
    socket sock;
    std::string host;
    int port;  
}

1) Поместить детали реализации (поля) в закрытую секцию private. Если наследовать от класса Network, производный класс будет иметь 
прямой доступ ко всем деталям реализации базового, что нарушает принцип
инкапсуляции деталей реализации.
2) Убрать возврат хоста и порта по ссылке чтобы вызывающий код, при из изменение, работал с копиями.
3) Объявить конструктор Network как explicit, чтобы запретить неявное преобразование std::string в Network.
4) Можно скрыть детали реализации за идиомой Pimpl:  std::shared_ptr<Impl> pImpl.

8. Опишите преимущества идиомы Pimpl. Представьте ситуацию, в которой вам пригодилось бы использование Pimpl.

Piml идиома использования указателя на реализацию, вместо самой реализации (набора полей) в закрытой секции.
1) Повышает сокрытие информации, т.к. достигается истинное сокрытие. Детали реализации (поля) и закрытые методы класса не просто 
спрятаны за private, а вообще невидимы в определении класса. Отдельно, сокрытие закрытых методов в pImpl позволяет устранить
неоднозначности в вызовах функций (закрытые функции участвуют в поиске имен и разрешении перегрузки). 

Плохая ситуация:
class myClass {
public:
    string Func(std::string); //1
private:
     char* Func(char*); //2
}

myClass obj;
obj.Func( "Hello" );  //функция 2 лучше соответствует строковому аргументу "Hello",  поэтому функция 1 отбрасывается как менее
подходящая. При этом функция 2 не может быть вызвана т.к. она private.
Если бы закрытая функция была скрыта в pImpl подошла бы открытая функция string Func(std::string) и устранилась бы неоднозначность.

2) Позволяет вносить изменения в детали реализации без перекомпиляции вызывающего кода. Меньшее время сборки приложения из-за 
ненадобности обрабатывать лишние определения типов, т.к. будет отсутствовать череда includ-ов заголовочных файлов. То есть,
снижение зависимостей заголовочных файлов, т.к. объявления указателя на объект не требуется полного определения этого объекта.


9. Зачем выносить код из класса в свободные функции? Если не выносить код, можно ли покрыть его тестами?

Это снижает "объемность" классов. Чем меньше класс, тем проще он в понимании и использовании. Как правило, минимальный класс всегда 
соответствует базовому принципу "один класс реализует одну сущность". Функции, не являющиеся членами или друзьями классов, повышают
степень инкапсуляции путем снижения зависимостей: тело такой функции не может зависеть от закрытых и защищенных членов класса. 
Они также разрушают монолитность классов, снижая связность, и повышают степень обобщенности, так как сложно писать шаблоны, которые 
не знают, является ли интересующая нас операция членом данного типа или нет. Методы класса можно покрыть тестами как и свободные функции. 
В тестовых функциях можно создать объект класса и протестировать его открытый интерфейс, так же как и свободные функции, подвая на
вход различные значения. Можно так же указать класс тестов другом тестируемого класса и тестировать так же и приватные методы.
