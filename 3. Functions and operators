1.
//========================================================================================
//pch.h

#ifndef PCH_H
#define PCH_H

#include <iostream>
#include <vector>
#include <cmath>

void CalculateAverages(std::vector<int>&, std::vector<float>&, std::vector<float>&);
float ArithmeticMean(int, int);
float GeometricMean(int, int);

#endif //PCH_H


//pch.cpp
void CalculateAverages(std::vector<int>& values, std::vector<float>& ariphmetic, std::vector<float>& geometric)
{
	for (int i = 0; i < values.size() - 1; i++)
	{
		ariphmetic.push_back(ArithmeticMean(values[i], values[i + 1]));
		geometric.push_back(GeometricMean(values[i], values[i + 1]));
	}
}

float ArithmeticMean(int val1, int val2)
{
	return static_cast<float>((val1 + val2) / 2.0);
}

float GeometricMean(int val1, int val2)
{
	return static_cast<float>(sqrt(val1 * val2));
}

 

2. 
//===========PairOfLong.h================

#pragma once

#include "pch.h"

class PairOfLong
{
public:
	/*=============CONSTRUCTORS/DESTRUCTOR==============*/
	PairOfLong();
	PairOfLong(long, long);
	~PairOfLong();

	/*===============OPERATORS OVERLOADING===============*/
	friend PairOfLong operator+(PairOfLong& f, PairOfLong& s);
	PairOfLong operator++(); //prefix
	PairOfLong operator++(int); //postfix
	PairOfLong operator--(); //prefix
	PairOfLong operator--(int); //postfix

	/*=================MEMBER FUNCTIONS==================*/
	bool And(PairOfLong& rPair); 
	bool Or(PairOfLong& rPair);

private:
	long first, second;
};

//===========PairOfLong.cpp================
#include "pch.h"
#include "PairOfLong.h"

PairOfLong::PairOfLong(): first(0), second(0)
{
}

PairOfLong::PairOfLong(long f, long s): first(f), second(s)
{
}

PairOfLong::~PairOfLong()
{
}

PairOfLong PairOfLong::operator++()
{
	this->first++;
	this->second++;

	return *this;
}

PairOfLong PairOfLong::operator++(int)
{
	PairOfLong tmp(this->first, this->second);

	this->first++;
	this->second++;

	return tmp;
}

PairOfLong PairOfLong::operator--()
{
	this->first--;
	this->second--;

	return *this;
}

PairOfLong PairOfLong::operator--(int)
{
	PairOfLong tmp(this->first, this->second);

	this->first--;
	this->second--;

	return tmp;
}

bool PairOfLong::And(PairOfLong& rPair)
{
	return (this->first && rPair.first) && (this->second && rPair.second);
}

bool PairOfLong::Or(PairOfLong& rPair)
{
	return (this->first || rPair.first) || (this->second || rPair.second);
}

PairOfLong operator+(PairOfLong& f, PairOfLong& s)
{
	return PairOfLong(f.first + s.first, f.second + s.second);
}

//Main.cpp

	//1. Declarations
	PairOfLong obj1(2, 10), obj2(4, 5);

	//2. Using
	PairOfLong sum = obj1 + obj2;
	
	if (obj1.And(obj2))
		std::cout << "obj1 and obj2 is true";
	else
		std::cout << "obj1 or obj2 isn't true";
		
	if (obj1.Or(obj2))
		std::cout << "obj1 or obj2 is true";
	else
		std::cout << "Nor obj1 and obj2 is true";

	obj1 = sum--;
	sum = ++obj1;
