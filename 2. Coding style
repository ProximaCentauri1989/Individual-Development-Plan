1. Найдите ошибки в приведенном коде:

// Library1.h

#define BOOL int
#define FALSE 0
#define TRUE 1

BOOL CheckFile(char* name);

// Library2.h

#define ERR_NODATA 42

// Client.cpp

int result = ParseFile(CheckFile);
if (result = ERR_NODATA) {
    // ...
}

Вместо макросов лучше использовать модификатор const. Хоть в данном случае макросы и просты, все же макросы советуется использовать 
только в тех случаях когда нет другого выхода. Любой макрос свидетельствует о несовершенстве ЯП, программы или программиста. 
Макросы это просто средство подстановки текста и они почти никогда не являются необходимыми в С++. В перспективе пропроцессор могут вовсе 
убрать. Поэтому для определения констант лучше использовать const. Первый #define можно убрать вообще, и если реально нужен псевдоним 
типа лучше использовать using (хотя он скорее используется в случае создания псевдонимов для "длинных" не POD-типов чем для 
таких как int):

using BOOL = int

Остальные #define-ы заменить на const:

const int FALSE = 0
const int TRUE = 1
const int ERR_NODATA = 42

В операторе if допущена ошибка, и вместо сравнения значения result c константой ERR_NODATA выполняется присваивание. Таким образом,
данное условие всегда будет истинно:

if (result = ERR_NODATA) {
    // ...
}

2. Снова рассмотрим функцию из задачи к главе 1:
int PasswordCount(int a, int n, int m, std::vector<int>& result)
{
    int sum;
    for (int i = n; i <= m; i++)
    {
        sum = 0;
        for (int j = n; j < i; j++)
        {
            sum += static_cast<int>(std::pow(a, j));
        }
        result.push_back(sum);
    }
    return sum;
}
Какая ошибка имеется в данной функции в связи с несоблюдением правил кодирования 18-19?

Переменная sum не инициализирована до входа в цикл. При условии если n > m sum никогда не получит значение и будет осущестувлен возврат
неинициализированной переменной (runtime error).


