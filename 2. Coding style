1. Вместо макросов лучше использовать модификатор const. Хоть в данном случае макросы и просты, все же макросы советуется использовать 
только в тех случаях когда нет другого выхода, и в случае констант современные правила С++ диктуют использование модификатора const, и
говорят о том, что любой макрос свидетельствует о несовершенстве ЯП, программы или программиста. Макросы это просто средство подстановки
текста и они почти никогда не являются необходимыми в С++. В перспективе пропроцессор могут вовсе убрать. Поэтому для определения 
констант лучше использовать const. Первый #define можно убрать вообще, и если реально нужен псевдоним типа лучше использовать using
(хотя он скорее используется в случае создания псевдонимов для "длинных" не POD-типов чем для таких как int):

using BOOL = int

Остальные #define-ы заменить на const:

const int FALSE = 0
const int TRUE = 1
const int ERR_NODATA = 42

В операторе if допущена ошибка, и вместо сравнения значения result c константой ERR_NODATA выполняется присваивание. Таким образом,
данное условие всегда будет истинно:

if (result = ERR_NODATA) {
    // ...
}


2. Переменная sum не инициализирована до входа в цикл. При условии если n > m sum никогда не получит значение и будет осущестувлен возврат
неинициализированной переменной (runtime error).

3. Объекты уровня пространства имен в разных единицах компиляции не должны зависеть друг от друга при инициализации, поскольку порядок
инициализации не определен. В // Handler1.cpp при создании объекта g_handler1Registrator идет работу с мапой g_handlerRegistry, которая
находиться в другой единице трансляции HandlerRegistry.cpp. Не определено будет ли вызван конструктор g_handlerRegistry до того как будет
вызван конструктор g_handler1Registrator (будет ли создан реестр до того как мы попытаемся им воспользоваться или нет?). Так же,
присутствует сильное сопряжение (tight coupling) между различными частями программы. Изменение чего-то одного здесь может привести к 
изменению всего. Слабое сопряжение (loose coupling) предполагает  сведение к минимуму числа соединений между разными частями программы.

Изменение порядка директив #include в .cpp файлах приведет к множественным обшикам при компиляции, которые сложны при анализе и устранении.
К примеру, если в Handler1.cpp поменнять порядок с:

#include <map>
#include "IHandler.h"
#include "HandlerRegistry.h"

на:

#include <map>
#include "HandlerRegistry.h"
#include "IHandler.h"

при обьявлении мапы получим ошибку, что IHanler не определен и последующий незадеклалированный идентификатор g_handlerRegistry, 
а так же ряд других связанных с этим ошибок компиляции.

При замене std::map на std::unordered_map придется изменить файлы HandlerRegistry.h, HandlerRegistry.cpp и Handler1.cpp. Данный факт
нарушает принцип расширяемости. Это свойство, позволяющее улучшать систему, не нарушая ее основной структуры. Изменение одного фрагмента
системы не должно влиять на ее другие фрагменты. Внесение наиболее вероятных изменений должно требовать наименьших усилий.

4. В коде нарушены такие правила: 
- присутствуют магические числа
- глубокая вложенность (много if-ов и else-ов)
- одна функция выполняет много других функций

const size_t MIN_PAGE_SIZE = 512
const size_t MAX_PAGE_SIZE = 65536
const size_t ALTERNATIVE_MAX_PAGE_SIZE = 1

//Я просто убрал магические числа и заменил вложенность на последовательность c отрицанием существующих проверок, как раз с целью
//устранения вложенности. Функция по прежнему выполняет много задач (проверок), но все они связаны с конечной целью:
//получить содержимое страницы по указанному номеру. К тому же, на мой взгляд, данный случай подпадает под исключение когда 
//функция может быть длинной если её функциональность нельзя разумно разделить на подзадачи. Здесь, для получения содержимого страницы
необходимо знать позицию начала в БД (сдвиг), и то что в функцию передан корректный номер страницы, а для этого необходимо 
получить её размер. К тому же, опираясь на размер страницы нужно понимать, что сигнатура БД соответсвует SQLite, что так же можно
сделать имея заголовок. Все это можно получить из заголовка. Заголовок необходимо считать, но для этого необходимо проверить чтобы 
общий размер БД в байтах был не менее размера заголовка и т.д. 

uint64_t GetPage(IFile& dbFile, uint32_t pageNumber, std::vector<uint8_t>& pageData)
{
    assert(pageData.empty() && "Out parameter must be empty");
    
    //Checking for correctness of a database size
    if(dbFile.GetSize() < sizeof(SQLiteDbHeader))
        throw SQLiteException(ERR_INVALID_DATABASE_SIZE, "SQLite database is too small");
    
    //Reading a header from database
    const size_t dbHeaderDataSize = sizeof(SQLiteDbHeader);
    std::vector<uint8_t> dbHeaderData(dbHeaderDataSize, 0);
    size_t read = dbFile.Read(dbHeaderData, 0, dbHeaderDataSize);
    
    //Checking for correctness of previous read operation
    if(dbHeaderDataSize != read)
        throw SQLiteException(ERR_FILEREAD, "Failed to read SQLite database header");
    
    //Creating a header
    SQLiteDbHeader header;
    ::memcpy(&header, dbHeaderData.data(), dbHeaderDataSize);
            
    //Checking for database signature
    const std::string signature("SQLite format 3");    
    if(signature != reinterpret_cast<const char*>(header.signature))
        throw SQLiteException(ERR_INVALID_DATABASE_FORMAT, "The format of the specified database is incorrect. Please use SQLite database.");
    
    //Checking for page size
    uint32_t pageSize = (header.pageSize == ALTERNATIVE_MAX_PAGE_SIZE) ? MAX_PAGE_SIZE : header.pageSize;                
    if(!(pageSize >= MIN_PAGE_SIZE && pageSize <= MAX_PAGE_SIZE && !(pageSize & (pageSize - 1))))
        throw SQLiteException(ERR_INVALID_DATABASE_PAGE_SIZE, "Invalid database page size");                
    
    //Get page count and cheсking it for correctness
    uint64_t pagesCount = dbFile.GetSize() / pageSize;
    if(pageNumber == 0 || pageNumber > pagesCount)
        throw SQLiteException(ERR_INVALID_PAGE_NUMBER, "Invalid page number: " + std::to_string(pageNumber));
    
    //Attempting to read a page data
    uint64_t pageOffset = (pageNumber - 1) * pageSize;
    pageData.resize(pageSize);
    
    if(dbFile.Read(pageData, pageOffset, pageSize) != pageSize)
         throw SQLiteException(ERR_FILEREAD, "Failed to read SQLite database page");

    return pageOffset;
}
